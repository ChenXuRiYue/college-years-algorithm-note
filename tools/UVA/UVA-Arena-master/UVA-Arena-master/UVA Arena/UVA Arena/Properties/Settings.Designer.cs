//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.36366
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UVA_Arena.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Consolas, 10pt")]
        public global::System.Drawing.Font EditorFont {
            get {
                return ((global::System.Drawing.Font)(this["EditorFont"]));
            }
            set {
                this["EditorFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EditorAutoCompleteBrackets {
            get {
                return ((bool)(this["EditorAutoCompleteBrackets"]));
            }
            set {
                this["EditorAutoCompleteBrackets"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EditorAutoIndentChars {
            get {
                return ((bool)(this["EditorAutoIndentChars"]));
            }
            set {
                this["EditorAutoIndentChars"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorCaretBlinking {
            get {
                return ((bool)(this["EditorCaretBlinking"]));
            }
            set {
                this["EditorCaretBlinking"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LightCyan")]
        public global::System.Drawing.Color EditorCurrentLineColor {
            get {
                return ((global::System.Drawing.Color)(this["EditorCurrentLineColor"]));
            }
            set {
                this["EditorCurrentLineColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Tab=IndentIncrease, Escape=ClearHints, PgUp=GoPageUp, PgDn=GoPageDown, End=GoEnd," +
            " Home=GoHome, Left=GoLeft, Up=GoUp, Right=GoRight, Down=GoDown, Ins=ReplaceMode," +
            " Del=DeleteCharRight, F2=CustomAction5, F3=FindNext, F5=CustomAction2, F6=Custom" +
            "Action3, F9=CustomAction4, Shift+Tab=IndentDecrease, Shift+PgUp=GoPageUpWithSele" +
            "ction, Shift+PgDn=GoPageDownWithSelection, Shift+End=GoEndWithSelection, Shift+H" +
            "ome=GoHomeWithSelection, Shift+Left=GoLeftWithSelection, Shift+Up=GoUpWithSelect" +
            "ion, Shift+Right=GoRightWithSelection, Shift+Down=GoDownWithSelection, Shift+Ins" +
            "=Paste, Shift+Del=Cut, Ctrl+Back=ClearWordLeft, Ctrl+Space=AutocompleteMenu, Ctr" +
            "l+End=GoLastLine, Ctrl+Home=GoFirstLine, Ctrl+Left=GoWordLeft, Ctrl+Up=ScrollUp," +
            " Ctrl+Right=GoWordRight, Ctrl+Down=ScrollDown, Ctrl+Ins=Copy, Ctrl+Del=ClearWord" +
            "Right, Ctrl+0=ZoomNormal, Ctrl+A=SelectAll, Ctrl+B=BookmarkLine, Ctrl+C=Copy, Ct" +
            "rl+E=MacroExecute, Ctrl+F=FindDialog, Ctrl+G=GoToDialog, Ctrl+H=ReplaceDialog, C" +
            "trl+I=AutoIndentChars, Ctrl+M=MacroRecord, Ctrl+N=GoNextBookmark, Ctrl+S=CustomA" +
            "ction1, Ctrl+U=UpperCase, Ctrl+V=Paste, Ctrl+X=Cut, Ctrl+Y=Redo, Ctrl+Z=Undo, Ct" +
            "rl+Add=ZoomIn, Ctrl+Subtract=ZoomOut, Ctrl+OemMinus=NavigateBackward, Ctrl+Shift" +
            "+End=GoLastLineWithSelection, Ctrl+Shift+Home=GoFirstLineWithSelection, Ctrl+Shi" +
            "ft+Left=GoWordLeftWithSelection, Ctrl+Shift+Right=GoWordRightWithSelection, Ctrl" +
            "+Shift+B=UnbookmarkLine, Ctrl+Shift+C=CommentSelected, Ctrl+Shift+N=GoPrevBookma" +
            "rk, Ctrl+Shift+U=LowerCase, Ctrl+Shift+OemMinus=NavigateForward, Alt+Back=Undo, " +
            "Alt+Up=MoveSelectedLinesUp, Alt+Down=MoveSelectedLinesDown, Alt+F=FindChar, Alt+" +
            "Shift+Left=GoLeft_ColumnSelectionMode, Alt+Shift+Up=GoUp_ColumnSelectionMode, Al" +
            "t+Shift+Right=GoRight_ColumnSelectionMode, Alt+Shift+Down=GoDown_ColumnSelection" +
            "Mode")]
        public string EditorHotKeys {
            get {
                return ((string)(this["EditorHotKeys"]));
            }
            set {
                this["EditorHotKeys"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorShowFoldingLines {
            get {
                return ((bool)(this["EditorShowFoldingLines"]));
            }
            set {
                this["EditorShowFoldingLines"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorShowLineNumbers {
            get {
                return ((bool)(this["EditorShowLineNumbers"]));
            }
            set {
                this["EditorShowLineNumbers"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EditorWordWrap {
            get {
                return ((bool)(this["EditorWordWrap"]));
            }
            set {
                this["EditorWordWrap"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorHighlightFolding {
            get {
                return ((bool)(this["EditorHighlightFolding"]));
            }
            set {
                this["EditorHighlightFolding"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EditorShowHints {
            get {
                return ((bool)(this["EditorShowHints"]));
            }
            set {
                this["EditorShowHints"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.4")]
        public double ProblemListSplitterRatio {
            get {
                return ((double)(this["ProblemListSplitterRatio"]));
            }
            set {
                this["ProblemListSplitterRatio"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.3")]
        public double CategoryListSplitterRatio {
            get {
                return ((double)(this["CategoryListSplitterRatio"]));
            }
            set {
                this["CategoryListSplitterRatio"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool HideAcceptedChecked {
            get {
                return ((bool)(this["HideAcceptedChecked"]));
            }
            set {
                this["HideAcceptedChecked"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.7")]
        public double CompilerSplitterRatio {
            get {
                return ((double)(this["CompilerSplitterRatio"]));
            }
            set {
                this["CompilerSplitterRatio"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.25")]
        public double CodesSplitterRatio {
            get {
                return ((double)(this["CodesSplitterRatio"]));
            }
            set {
                this["CodesSplitterRatio"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool LoggerIsTopMost {
            get {
                return ((bool)(this["LoggerIsTopMost"]));
            }
            set {
                this["LoggerIsTopMost"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoUpdateUserStat {
            get {
                return ((bool)(this["AutoUpdateUserStat"]));
            }
            set {
                this["AutoUpdateUserStat"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool AutoUpdateJudgeStatus {
            get {
                return ((bool)(this["AutoUpdateJudgeStatus"]));
            }
            set {
                this["AutoUpdateJudgeStatus"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5000")]
        public int UserStatUpdateInterval {
            get {
                return ((int)(this["UserStatUpdateInterval"]));
            }
            set {
                this["UserStatUpdateInterval"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2000")]
        public int JudgeStatUpdateInterval {
            get {
                return ((int)(this["JudgeStatUpdateInterval"]));
            }
            set {
                this["JudgeStatUpdateInterval"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("100")]
        public int UserStatViewOption {
            get {
                return ((int)(this["UserStatViewOption"]));
            }
            set {
                this["UserStatViewOption"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Maximized")]
        public global::System.Windows.Forms.FormWindowState MainWindowState {
            get {
                return ((global::System.Windows.Forms.FormWindowState)(this["MainWindowState"]));
            }
            set {
                this["MainWindowState"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AskForUsernameEverytime {
            get {
                return ((bool)(this["AskForUsernameEverytime"]));
            }
            set {
                this["AskForUsernameEverytime"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool HideExitDialog {
            get {
                return ((bool)(this["HideExitDialog"]));
            }
            set {
                this["HideExitDialog"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool CheckForUpdate {
            get {
                return ((bool)(this["CheckForUpdate"]));
            }
            set {
                this["CheckForUpdate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ProblemViewExpandCollapse {
            get {
                return ((bool)(this["ProblemViewExpandCollapse"]));
            }
            set {
                this["ProblemViewExpandCollapse"] = value;
            }
        }
    }
}
